#!/bin/bash
# {{ansible_managed}}

# renew only the named certs in LE, when they are about to expire
# and place all certs where they can be easily synced to brains
#
#

# define some variables
BASEDIR=/opt/autodeflect/
LE_SITE_LIST=${BASEDIR}/etc/letsencrypt-site.list
LE_OUTPUT_DIR=${BASEDIR}/le_certs
LE_DIR=/etc/letsencrypt
RENEW_WINDOW=29days   # `man date` for format details
RENEW_DATE=$(date -d "+$RENEW_WINDOW" +%s)
NS_SERVER={{ authoritative_nameserver_grep }}
unset NGINX_STOPPED

function check_cert() {
  echo "checking local cert validity for ${DOMAIN_W_ARGS%% *}"
  if [ -f ${LE_DIR}/live/${DOMAIN_W_ARGS%% *}/cert.pem ] ; then
    echo "found a cert for ${DOMAIN_W_ARGS%% *}"
    EXPIRY=$(date -d "$(openssl x509 -noout -dates -in /etc/letsencrypt/live/${DOMAIN_W_ARGS%% *}/cert.pem | awk -F'=' '/After/ {print $2}')" +%s)
    if [ $EXPIRY -gt $RENEW_DATE ]; then
      echo "validity is greater than $RENEW_WINDOW"
      STATUS=0
     else
      echo "validity is less than $RENEW_WINDOW"
      STATUS=1
    fi
   else
     echo "no cert found locally"
     STATUS=2
  fi
return $STATUS
}

function renew_cert() {
  echo "requesting cert for ${DOMAIN_W_ARGS%% *}"
  [ "$NGINX_STOPPED" == "true" ] || /usr/sbin/service nginx stop
  NGINX_STOPPED=true
  certbot certonly --standalone --agree-tos --expand --preferred-challenges http -m "{{le_email}}"  -n -d $DOMAIN_W_ARGS
}

function check_delegation() {
  echo "checking ${DOMAIN_W_ARGS%% *} is delegated"
  dig -t ns +short ${DOMAIN_W_ARGS%% *} | egrep "$NS_SERVER" >/dev/null
  if [ "$?" -ne 0 ] ; then
    PARENT=$(echo ${DOMAIN_W_ARGS%% *} | awk -F'.' '{print $(NF-1) "." $(NF) }')
    dig -t ns +short $PARENT | egrep "$NS_SERVER" >/dev/null
  fi
}

function initialise_output_dir() {
  echo "initialising output dir"
  [ -d $LE_OUTPUT_DIR ] && rm -rf ${LE_OUTPUT_DIR}/* || mkdir $LE_OUTPUT_DIR
}

function populate_output_dir() {
  echo "populating output dir with cert bundle for ${DOMAIN_W_ARGS%% *}"
  cp ${LE_DIR}/live/${DOMAIN_W_ARGS%% *}/cert.pem ${LE_OUTPUT_DIR}/${DOMAIN_W_ARGS%% *}.le.cert.crt
  cp ${LE_DIR}/live/${DOMAIN_W_ARGS%% *}/chain.pem ${LE_OUTPUT_DIR}/${DOMAIN_W_ARGS%% *}.le.chain.crt
  cp ${LE_DIR}/live/${DOMAIN_W_ARGS%% *}/privkey.pem ${LE_OUTPUT_DIR}/${DOMAIN_W_ARGS%% *}.le.key
}

function check_cert_exists() {
  DOMAIN_WO_ARGS=$(echo "${DOMAIN_W_ARGS%% *}" | cut -d' ' -f1)
  echo "checking ${DOMAIN_WO_ARGS} cert already generated"
  if [ -f "${LE_DIR}/live/${DOMAIN_WO_ARGS}/privkey.pem" ] ; then
    return 0
  else
    return 1
  fi
}

# This is a bit hard to read, so explained in detail:
# - grep out any lines beginning with a '#" character or empty
# - pipe that output to a while loop that reads line by line
# - check that the site appears to be delegated to us
# - run the "check_cert()" function defined above to see whether
#   we already have an up to date version of this cert
# - if we do not, go ahead and request a cert (including any sub-
#   domains that should be included)
# - if we appear not delegated but we already have cert from a previous run
#   copy it also in case delegation check is not right
# - place all the cert/key bundles into an easy dir to be synced
#   to brains
initialise_output_dir
egrep -v '^$|^#' $LE_SITE_LIST | while IFS='' read -r DOMAIN_W_ARGS ; do
  if check_delegation ; then
    check_cert || renew_cert 
    populate_output_dir
  elif check_cert_exists ; then
    echo "${DOMAIN_W_ARGS%% *} not delegated but cert exists from previous run"
    populate_output_dir
  else
    echo "${DOMAIN_W_ARGS%% *} does not appear delegated - skipping"
  fi
done

# make sure nginx is running
/usr/sbin/service nginx start

