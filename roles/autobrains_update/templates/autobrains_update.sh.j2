#!/bin/bash
# {{ansible_managed}}
# {{ansible_managed}}
# ./autobrains_update.sh -i --force
# will update this file from template
# or if autobrains_update.sh is broken
#
# rm autobrains_update.sh
# ansible-playbook site.yml -l controller --tags=update
#
# TODO: removed all start_ssh_agent. Need to give option to load and load or use alreadly loaded key

# Version hash: $Id$

## This will be the loop variable DNETS
{% set dnetspace = joiner(" ") %}
DNETS='{% for dnet in dnets %}{{dnetspace()}}{{dnet}}{% endfor %}'

EMAIL_NOTIFY='{{autobrains_config.email_notify}}'
EMAIL_KEY_ID='{{autobrains_config.email_key_id}}'
LOGDIR='{{autobrains_config.log_dir}}'
EXIT_SUCCESS=0
EXIT_FAILURE=1

CUR_DIR="$(pwd)"
LOCK_PREFIX='.autobrains_lock-'
MAINTENANCE_LOCK='.maint_lock-'
AW_LASTRUN_FILE='.aw_lastrun'
COMPLETED_TIME_FILE='.completed_timestamp'

{% set bpspace = joiner(" ") %}
{% if autobrains_bypasses is defined and autobrains_bypasses %}
BYPASS_FILES="{% for bypass in autobrains_bypasses %}{{bpspace()}}{{bypass}}{% endfor %}"
{% endif %}

##########
## SETUP 
COMMANDLINE="$0 $*"
ECHO_SEPARATOR='\n##########\n\t##\t##\n##########\n'
DATE=$(date +%Y%m%d%H%M%S)
EDATE=$(date +%s)
# Just in case
unset OVERRIDECHECKED INITAU NOCLIENT NOSPIN DEBUG STOP THEREST FORCE YES NO MOST MAINT_BYPASS MAINT CHANGED NEWCLIENTS_YML SKIP_UPDATE REMAP_TOUCHED SKIPPED_INSTALL AUTODEFLECT_AGENT NONLIVESAFE DEPLOYED SMART

# set associative arrays
declare -A SKIPPED_INSTALL
declare -A REMAP_TOUCHED
declare -A DEPLOYED

# UNAME may be clobbered later if "--auto" flag is detected
if [ -n "$SUDO_USER" ]; then
  UNAME=$SUDO_USER ; else
  UNAME=$(id -nu)
fi

############
## FUNCTIONS

function autobrains_help() {
HELP=$(cat <<EOF

-h|--help	Display this help and exit.

-m|--maint	Put $0 in maintenance mode.
		so it will need -b|--bypass
		to run.

-b|--bypass	Used to run when in maintenance
		mode.

-y|--yes	Alway answer yes to prompts.

-n|--no		Always answer no to prompts.

-d|--debug	Run in debug mode. More output
		printed to screen.

-s|--nospin	Do not use spinner while waiting
		for action to finish.

-i|--init	Rebuild this file and exit. Any
		temporary changes will be lost.

-c|--noclient	Do not download a new client.yml

--most		Run most local tasks. Mainly
		runs everything needed to update
		configuration to be pushed to
		the edges.

--all		Runs all tasks.

--force		Needed to get by some dangerous
		options. You will be prompted to
		include this option to force anyway.

--smart		Meant to be non-interactive and to 
		automatically pick the best options
		to run a complete automated run. You
		must use --force with this and the
		ssh-agent and ssh-add must be correctly
		running before using this option.
		
--auto		For use by automated systems only.
		Will not send notify email. This changes
		the internal UNAME to "auto"

Some useful options:

$0 --most -n
			This will update configuration but
			not install. You can then later run
			$0 and answer n for running for
			running rebuild options but y on
			checking for configurations updates.

$0 --most -y --force
			Run most local configuration and install.
EOF
)

echo "$HELP" | less -EXR
}

# set the encrypted mailer routine
function notify() {
# TODO: Make this work again. Currently disabled
#gpg --homedir {{tls_gpghome}} -e -a -r $EMAIL_KEY_ID | mailx -s "$UNAME updated w/ autobrains" ${EMAIL_NOTIFY} 
echo "TODO: fix notify"
}

function notify_store() {
local NOTIFY_CONTENT="$UNAME updated $1 @ $DATE $(cat)" 
echo "$NOTIFY_CONTENT" >> config/rundata/$LOCK_PREFIX$UNAME
}

function lock() {
ls -1 config/rundata/$LOCK_PREFIX* >> config/logs/current.log 2>&1
RT=$?
if [ $RT -eq 0 ]; then 
  echo "\"$(ls -x config/rundata/$LOCK_PREFIX* | sed -e "s/config\/rundata\/$LOCK_PREFIX//g")\" is currently running this script. If not remove \"$(ls -x config/rundata/$LOCK_PREFIX*)\""
  exit
else
 touch config/rundata/$LOCK_PREFIX$UNAME || echo -e "Could not write $(pwd)/config/rundata/$LOCK_PREFIX$UNAME\n\n"
fi
}

function maint_lock() {
if [ -n "$MAINT_BYPASS" ]; then
  if [ -n "$MAINT" ]; then
    echo "Can not set maintenance mode while trying to bypass. Exiting."
    exit
  else
    echo "Using maintenance bypass ....."
    return
  fi
fi
ls -1 config/rundata/$MAINTENANCE_LOCK* >> config/logs/current.log 2>&1
RT=$?
if [ $RT -eq 0 ]; then
  echo -e "\"$(ls -x config/rundata/$MAINTENANCE_LOCK* | sed -e "s/config\/rundata\/$MAINTENANCE_LOCK//g")\" put in maintenance mode. Remove file\n\"$(ls -x config/rundata/$MAINTENANCE_LOCK*)\" when done.\nMaintenance lock details are:\n$(<config/rundata/$MAINTENANCE_LOCK*)\n\nUse $0 -b or $0 --bypass to run anyway.\n"
  exit
fi

if [ -n "$MAINT" ]; then
  unset MAINTREASON
  until [ -n "$MAINTREASON" ] ; do
    echo "in case you get distracted... why maint mode? " ; read MAINTREASON
  done
  date "+%c             $MAINTREASON" > config/rundata/$MAINTENANCE_LOCK$UNAME || echo -e "Could not write $(pwd)/config/rundata/$MAINTENANCE_LOCK$UNAME\n\n"
  touch config/rundata/$MAINTENANCE_LOCK$UNAME || echo -e "Could not write $(pwd)/config/rundata/$MAINTENANCE_LOCK$UNAME\n\n"
  echo "Maintenance mode is now enabled. Use $0 -b or $0 --bypass"
  exit
fi
}

function yorn() {
if [ -n "$YES" ]; then
  yn='y'
  $2
elif [ -n "$NO" ]; then
  yn='n'
  return
else
  while true; do
    read -p "$1 (y/n)? " yn
    case $yn in
      [Yy]* ) $2; break;;
      [Nn]* ) break;;
          * ) echo "Please answer y or n.";;
      esac
  done
fi
[ -n "$SMART" ] || echo
}

function fetch_clients_yml() {
  if [ -n "$DEBUG" ]; then
    ansible-playbook site.yml -l dashboard --tags='clients_yml'
    local exitcode=$?
    if [ $exitcode -ne 0 ]; then
      echo "Something went wrong. Can not continue."
      exit
    fi
  else
    ansible-playbook site.yml -l dashboard --tags='clients_yml' >> config/logs/current.log &
    spin $!
  fi

  if diff clients.yml-revisions/clients.yml-last_used clients.yml >> config/logs/current.log 2>&1 ; then
    echo "No differences found in clients.yml since updated."
  else
    echo "Differences found in clients.yml since updated."
    echo -e $ECHO_SEPARATOR
    diff -U 5 clients.yml-revisions/clients.yml-last_used clients.yml
  NEWCLIENTS_YML=0
  fi
}

function install_file {
# File from Ansible
NEW_FILE=$1
# File in .../deflect/
OLD_FILE=$2

# Directory in .../deflect/
DIR=${OLD_FILE%/*}
# File name, same as basename
FILE=${OLD_FILE##*/}

[ -d ${DIR}/old ] || mkdir ${DIR}/old || ( echo "error creating old directory -quitting" && exit )
if [ -f ${OLD_FILE} ]; then

  cp ${OLD_FILE} ${DIR}/old/${FILE}-${DATE}-${UNAME}
  cp ${NEW_FILE} ${OLD_FILE}
  [ -f ${DIR}/old/${FILE}-latest ] && rm ${DIR}/old/${FILE}-latest
  ( diff -u ${DIR}/old/${FILE}-${DATE}-${UNAME} ${OLD_FILE} ) | tee ${LOGDIR}/${FILE}.${DATE} | notify_store ${OLD_FILE}
  cp ${DIR}/${FILE} ${DIR}/old/${FILE}-latest
else
  cp ${NEW_FILE} ${OLD_FILE}
  cp ${DIR}/${FILE} ${DIR}/old/${FILE}-latest
  ( echo "installed ${OLD_FILE}" ) | tee ${LOGDIR}/${FILE}.${DATE} | notify_store ${OLD_FILE}
fi
}

function le_cert_bundle_diff_loop {
  ATS_DIR="{{autobrains_config.deflect_dir}}/edges/$DNET{{autobrains_config.trafficserver_dir}}"
  for i in {{letsencrypt_output}}/*; do
    ls $i >> config/logs/current.log 2>&1
    RT=$?
    if [ "$RT" -gt 0 ]; then 
      continue
    fi   
    local test=$(match_bypass_file "$(basename $i)")
    if [ $test -gt 0 ]; then 
      echo -e "Bypassing file $(basename $i)" 
      continue
    fi   
    SITENAME=$(echo $(basename $i) | sed -E 's%\.le\.chain\.crt$|\.le\.cert\.crt$|\.le\.key$%%')
    if grep "^## BEGIN $SITENAME$" $ATS_DIR/conf/remap.config >> config/logs/current.log ; then
      DIFF_FILES="$ATS_DIR/conf/ssl/$(basename $i) $i"
      if [ -f "$ATS_DIR/conf/ssl/$(basename $i)" ] ; then
        diff -Nq $DIFF_FILES
        RT=$?
      else
        echo "new file for $ATS_DIR/conf/ssl/$(basename $i)"
        RT=1
      fi
      if [ $RT -eq 2 ] ; then 
        echo "ERROR: There was something wrong with the diff command"
      elif [ $RT -eq 1 ] ; then 
        yorn "Do you want to install this file in $DNET" "install_file $i $ATS_DIR/conf/ssl/$(basename $i)" 
        [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && SKIPPED_INSTALL[$DNET]=0 || REMAP_TOUCHED[$DNET]=0
        echo -e $ECHO_SEPARATOR 
      fi   
    fi
    
done
}

function ats_custom_conf_diff {
  ATS_DIR="{{autobrains_config.deflect_dir}}/edges/$DNET{{autobrains_config.trafficserver_dir}}"
  for i in config/conf.d/*; do
    ls $i >> config/logs/current.log 2>&1
    RT=$?
    if [ "$RT" -gt 0 ]; then
      continue
    fi
    DIFF_FILES="$ATS_DIR/conf/conf.d/$(basename $i) $i"
    diff -Nq $DIFF_FILES
    RT=$?
    if [ $RT -eq 2 ]
    then
      echo "ERROR: There was something wrong with the diff command"
    elif [ $RT -eq 1 ]
    then
      yorn "Do you want to install this file in $DNET" "install_file $i $ATS_DIR/conf/conf.d/$(basename $i)"
      [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && SKIPPED_INSTALL[$DNET]=0 || REMAP_TOUCHED[$DNET]=0
      echo -e $ECHO_SEPARATOR
    fi
done
}

function uploaded_cert_bundle_diff_loop {
  ATS_DIR="{{autobrains_config.deflect_dir}}/edges/$DNET{{autobrains_config.trafficserver_dir}}"
  for i in {{tls_home}}/output/$DNET/*; do
    ls $i >> config/logs/current.log 2>&1
    RT=$?
    if [ "$RT" -gt 0 ]; then 
      continue
    fi
    local test=$(match_bypass_file "$(basename $i)")
    if [ $test -gt 0 ]; then 
      echo -e "Bypassing file $(basename $i)" 
      continue
    fi
    DIFF_FILES="$ATS_DIR/conf/ssl/$(basename $i) $i"
    diff -Nq $DIFF_FILES
    RT=$?
    if [ $RT -eq 2 ]
    then 
      echo "ERROR: There was something wrong with the diff command"
    elif [ $RT -eq 1 ]
    then 
      yorn "Do you want to install this file in $DNET" "install_file $i $ATS_DIR/conf/ssl/$(basename $i)" 
      [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && SKIPPED_INSTALL[$DNET]=0 || REMAP_TOUCHED[$DNET]=0
      echo -e $ECHO_SEPARATOR 
    fi
    
done
}

function banjax_diff_loop {
  ATS_DIR="{{autobrains_config.deflect_dir}}/edges/$DNET{{autobrains_config.trafficserver_dir}}"
  for i in {{banjax_output}}$DNET/banjax.d/*.bconf; do
    ls $i >> config/logs/current.log 2>&1
    RT=$?
    if [ "$RT" -gt 0 ]; then
      continue
    fi
    local test=$(match_bypass_file "$(basename $i)")
    if [ $test -gt 0 ]; then 
      echo -e "Bypassing file $(basename $i)" 
      continue
    fi
    DIFF_FILES="$ATS_DIR/conf/banjax/banjax.d/$(basename $i) $i"
    diff -Ntu $DIFF_FILES
    RT=$?
    if [ $RT -eq 2 ]
    then
      echo "ERROR: There was something wrong with the diff command"
    elif [ $RT -eq 1 ]
    then
      yorn "Do you want to install this file" "install_file $i $ATS_DIR/conf/banjax/banjax.d/$(basename $i)" 
      [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && SKIPPED_INSTALL[$DNET]=0 || REMAP_TOUCHED[$DNET]=0
      echo -e $ECHO_SEPARATOR 
  fi
    
done 
}

function zone_diff_loop {
  for i in {{bind_output}}$DNET/*.zone; do
    ls $i >> config/logs/current.log 2>&1
    RT=$?
    if [ "$RT" -gt 0 ]; then
      continue
    fi
    local test=$(match_bypass_file "$(basename $i)")
    if [ $test -gt 0 ]; then 
      echo -e "Bypassing file $(basename $i)"
      continue
    fi
    DIFF_FILES="{{autobrains_config.zone_files}}/$DNET/$(basename $i) $i"
    diff -Ntu $DIFF_FILES
    RT=$?
    if [ $RT -eq 2 ]
    then
      echo "ERROR: There was something wrong with the diff command"
    elif [ $RT -eq 1 ]
    then
      # Check if live zone file is active in another dnet
      local zone_conflict=0
      for d in $DNETS ; do
        if [ "$d" == "$DNET" ]; then
          continue
        else
          [ -f {{autobrains_config.zone_files}}/$d/$(basename $i) ] && echo -e "\n$(basename $i) exists in $d\nand you want to install to $DNET.\nThis is not aloud! Please fix this.\nexample:\n mv {{autobrains_config.zone_files}}/$d/$(basename $i) {{autobrains_config.zone_files}}/$DNET/$(basename $i)\nor\n rm {{autobrains_config.zone_files}}/$d/$(basename $i)\nBypassing install option.\n" && local zone_conflict=1
        fi
      done
      if [ $zone_conflict -eq 1 ]; then
        read -t 30 -p "[Enter] to continue or will automatically in 30 seconds "
      else
        yorn "Do you want to install this file" "install_file $i {{autobrains_config.zone_files}}/$DNET/$(basename $i)"
        [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && SKIPPED_INSTALL[$DNET]=0
        echo -e $ECHO_SEPARATOR
     fi
    fi
done
}

function banjax_new_diff {
  ATS_DIR="{{autobrains_config.deflect_dir}}/edges/$DNET{{autobrains_config.trafficserver_dir}}"
  local test=$(match_bypass_file banjax.conf)
    if [ $test -gt 0 ]; then
      echo "Bypassing file banjax.conf"
      return 
    fi
  diff -Ntu $ATS_DIR/conf/banjax/banjax.conf {{banjax_output}}$DNET/banjax.conf
  RT=$?
  if [ $RT -eq 2 ]
  then
    echo "ERROR: There was something wrong with the diff command"
  elif [ $RT -eq 1 ]
  then
    yorn "Do you want to install this file" "install_file {{banjax_output}}$DNET/banjax.conf $ATS_DIR/conf/banjax/banjax.conf"
    [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && SKIPPED_INSTALL[$DNET]=0 || REMAP_TOUCHED[$DNET]=0
    echo -e $ECHO_SEPARATOR
  fi
}

# ATS 7+
function logging_diff {
  ATS_DIR="{{autobrains_config.deflect_dir}}/edges/$DNET{{autobrains_config.trafficserver_dir}}"
  local test=$(match_bypass_file logging.config)
    if [ $test -gt 0 ]; then
      echo "Bypassing file logging.config"
      return 
    fi
  diff -Ntu $ATS_DIR/conf/logging.config {{ats_output}}$DNET/logging.config
  RT=$?
  if [ $RT -eq 2 ]
  then
    echo "ERROR: There was something wrong with the diff command"
  elif [ $RT -eq 1 ]
  then 
    yorn "Do you want to install this file" "install_file {{ats_output}}$DNET/logging.config $ATS_DIR/conf/logging.config" 
    [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && SKIPPED_INSTALL[$DNET]=0 || REMAP_TOUCHED[$DNET]=0
    echo -e $ECHO_SEPARATOR
  fi
}

function dashboard_timestamp_diff {
  ATS_DIR="{{autobrains_config.deflect_dir}}/edges/$DNET{{autobrains_config.trafficserver_dir}}"
  local test=$(match_bypass_file dashboard.timestamp)
    if [ $test -gt 0 ]; then
      echo "Bypassing file dashboard.timestamp"
      return 
    fi
  diff -Ntu $ATS_DIR/conf/dashboard.timestamp {{ats_output}}$DNET/dashboard.timestamp
  RT=$?
  if [ $RT -eq 2 ]
  then
    echo "ERROR: There was something wrong with the diff command"
  elif [ $RT -eq 1 ]
  then 
    yorn "Do you want to install this file" "install_file {{ats_output}}$DNET/dashboard.timestamp $ATS_DIR/conf/dashboard.timestamp" 
    [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && SKIPPED_INSTALL[$DNET]=0
    echo -e $ECHO_SEPARATOR
  fi
}

function ssl_multicert_diff {
  ATS_DIR="{{autobrains_config.deflect_dir}}/edges/$DNET{{autobrains_config.trafficserver_dir}}"
  local test=$(match_bypass_file ssl_multicert.config)
    if [ $test -gt 0 ]; then
      echo "Bypassing file ssl_multicert.config"
      return 
    fi
  diff -Ntu $ATS_DIR/conf/ssl_multicert.config {{ats_output}}$DNET/ssl_multicert.config
  RT=$?
  if [ $RT -eq 2 ]
  then
    echo "ERROR: There was something wrong with the diff command"
  elif [ $RT -eq 1 ]
  then 
    yorn "Do you want to install this file" "install_file {{ats_output}}$DNET/ssl_multicert.config $ATS_DIR/conf/ssl_multicert.config" 
    [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && SKIPPED_INSTALL[$DNET]=0 || REMAP_TOUCHED[$DNET]=0
    echo -e $ECHO_SEPARATOR
  fi
}

function remap_diff {
  ATS_DIR="{{autobrains_config.deflect_dir}}/edges/$DNET{{autobrains_config.trafficserver_dir}}"
  local test=$(match_bypass_file remap.config)
    if [ $test -gt 0 ]; then
      echo "Bypassing file remap.config"
      return 
    fi
  diff -Ntu $ATS_DIR/conf/remap.config {{ats_output}}$DNET/remap.config
  RT=$?
  if [ $RT -eq 2 ]
  then
    echo "ERROR: There was something wrong with the diff command"
  elif [ $RT -eq 1 ]
  then  
    yorn "Do you want to install this file" "install_file {{ats_output}}$DNET/remap.config $ATS_DIR/conf/remap.config"
    [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && SKIPPED_INSTALL[$DNET]=0 || REMAP_TOUCHED[$DNET]=0
    echo -e $ECHO_SEPARATOR
  fi 
}

function hosts_diff {
  ATS_DIR="{{autobrains_config.deflect_dir}}/edges/$DNET{{autobrains_config.trafficserver_dir}}"
  local test=$(match_bypass_file hosts.origin)
    if [ $test -gt 0 ]; then
      echo "Bypassing file hosts.origin"
      return 
    fi
  diff -Ntu $ATS_DIR/conf/hosts.origin {{ats_output}}$DNET/hosts.origin
  RT=$?
  if [ $RT -eq 2 ]
  then
    echo "ERROR: There was something wrong with the diff command"
  elif [ $RT -eq 1 ]
  then  
    yorn "Do you want to install this file" "install_file {{ats_output}}$DNET/hosts.origin $ATS_DIR/conf/hosts.origin"
    [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && SKIPPED_INSTALL[$DNET]=0 || REMAP_TOUCHED[$DNET]=0
    echo -e $ECHO_SEPARATOR
  fi 
}

function cache_diff {
  ATS_DIR="{{autobrains_config.deflect_dir}}/edges/$DNET{{autobrains_config.trafficserver_dir}}"
  local test=$(match_bypass_file cache.config)
    if [ $test -gt 0 ]; then
      echo "Bypassing file cache.config"
      return 
    fi
  diff -Ntu $ATS_DIR/conf/cache.config {{ats_output}}$DNET/cache.config
  RT=$?
  if [ $RT -eq 2 ]
  then
    echo "ERROR: There was something wrong with the diff command"
  elif [ $RT -eq 1 ]
  then  
    yorn "Do you want to install this file" "install_file {{ats_output}}$DNET/cache.config $ATS_DIR/conf/cache.config"
    [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && SKIPPED_INSTALL[$DNET]=0 || REMAP_TOUCHED[$DNET]=0
    echo -e $ECHO_SEPARATOR
  fi 
}

function bind_local_templated_diff {
  local test=$(match_bypass_file named.conf.local.edgemanage)
    if [ $test -gt 0 ]; then
      echo "Bypassing file named.conf.local.edgemanage"
      return 
    fi
  diff -Ntu {{autobrains_config.loc_bind_confs}}/named.conf.local.edgemanage {{bind_output}}bind/named.conf.local.edgemanage
  RT=$?
  if [ $RT -eq 2 ]
  then
    echo "ERROR: There was something wrong with the diff command"
  elif [ $RT -eq 1 ]
  then
    yorn "Do you want to install this file" "install_file {{bind_output}}bind/named.conf.local.edgemanage {{autobrains_config["loc_bind_confs"]}}/named.conf.local.edgemanage"
    [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && mark_all_skipped 
    echo -e $ECHO_SEPARATOR
  fi
}
  
function all_diff {
for DNET in $DNETS; do
  banjax_new_diff
  banjax_diff_loop
  logging_diff
  ssl_multicert_diff
  remap_diff
  hosts_diff
  cache_diff
  ats_custom_conf_diff
  zone_diff_loop
  le_cert_bundle_diff_loop
  uploaded_cert_bundle_diff_loop
  dashboard_timestamp_diff
done
  bind_local_templated_diff
}

function list_bypass_files {
local aa
for aa in $BYPASS_FILES; do
  echo $aa
done
}

function match_bypass_file {
local a=$1
local return=0
for i in $BYPASS_FILES; do
 if [ "${i}" = "${a}" ]; then
   local return=1
 fi
done
echo $return
} 

function ctrl_c() {
  echo -e "\n** CTRL-C **\nSafe cleaning up." 
  finish
}

function finish() {
  local el=$(( $(date +%s) - EDATE ))
  ((sec=el%60, el/=60, min=el%60, hrs=el/60))
  local timetook=$(printf "%d:%02d:%02d" $hrs $min $sec)
  if [ -s "config/rundata/$LOCK_PREFIX$UNAME" ]; then 
    if [ "$UNAME" != "auto" ]; then
      cat "config/rundata/$LOCK_PREFIX$UNAME" | notify
    fi
    echo "[$(date -d @$EDATE)] $UNAME \"$COMMANDLINE\" [$timetook] - \"$(cat "config/rundata/$LOCK_PREFIX$UNAME")\"" >> config/logs/autodeflect-$(date +%Y%m%d).log
  else
    echo "[$(date -d @$EDATE)] $UNAME \"$COMMANDLINE\" [$timetook] - \"NO DIFF\"" >> config/logs/autodeflect-$(date +%Y%m%d).log
  fi
  echo "Last complete run: $(date -d @$(cat config/rundata/$COMPLETED_TIME_FILE))"
  # Write to audit.log
  echo "[$(date -d @$EDATE)] $UNAME \"$COMMANDLINE\" [$timetook]" >> config/logs/audit.log
  rm config/rundata/$LOCK_PREFIX$UNAME  2>> config/logs/current.log
  [ -n "$SMART" ] || tput cnorm
  [ -n "$AUTODEFLECT_AGENT" ] && eval `ssh-agent -k` && echo "killed autobrain ssh-agent (${AUTODEFLECT_AGENT})"
  cat config/logs/current.log > config/logs/current-$DATE.log 
  echo "Runtime: $timetook"
  cd $CUR_DIR
  trap '' EXIT
  exit
}

function dot_generated() {
  ATS_DIR="{{autobrains_config.deflect_dir}}/edges/$DNET{{autobrains_config.trafficserver_dir}}"
  touch $ATS_DIR/conf/remap.config
  CHANGED=0
}

function controller_update() {
  # Check to make sure override.yml does not have sites not in clients.yml
  check_override

  rm -rf {{ats_output}} {{banjax_output}} {{bind_output}} {{tls_home}}/output
  if [ -n "$DEBUG" ]; then
    ansible-playbook site.yml -l controller
    local exitcode=$?
    if [ $exitcode -ne 0 ]; then
      echo "Something went wrong. Can not continue."
      exit
    fi
  else
    ansible-playbook site.yml -l controller >> config/logs/current.log &
    spin $!
  fi
}

function initau() {
  rm $0
  ansible-playbook site.yml -l controller --tags='update'
}

function spin() {
# Expects PID to be sent
local pid=$1
local delay=0.1
[ -n "$SMART" ] || tput civis
if [ -z "$NOSPIN" ]; then
  while [ "$(ps p $pid o pid=)" ]; do
    for s in / - \\ \|; do
      printf "\r[ $s ] - Running";
      sleep $delay;
    done;
  done
  # We are done
  wait $pid
  local exitcode=$?
  tput cnorm
  printf "\r                              \r"
else
  [ -n "$SMART" ] || echo "[ / ] - Running with no spinner, please wait."
  wait $pid
  local exitcode=$?
  [ -n "$SMART" ] || tput cnorm
fi

if [ $exitcode -ne 0 ]; then
  echo "Something went wrong. Run again in debug mode."
  exit
fi
}

function check_override {
  local check=$(for n in $(grep '^  [a-zA-Z0-9]' override.yml) ; do grep $n clients.yml >> config/logs/current.log || echo "${n%%:} not found in clients.yml. This needs fixed." ; done)

  if [ "$check" == "" ]; then
    OVERRIDECHECKED=0
    return
  else
    echo "$check"
    exit
  fi
}

# raw needs set here because of j2 template and arrays in the function
{% raw %}
function get_nonlive_edge() {
# This will return 1 available nonlive edges 
# Also it will try 5 times until it gets atleast 1 or returns nothing
local count
local edge
local rand
if [ $DNET ]; then
  count=5
  until [ $count -le 0 ]; do
    # This should return a array
    edge=($(edge_query --dnet $DNET --health allpass -s out -m available -q --format flat 2>> config/logs/current.log | cut -d' ' -f1 | cut -d'.' -f1 | tr '\r\n' ' '))
    if [ "${#edge[@]}" -ge "1" ]; then
      count=0
    else
      let count-=1
      sleep 5
    fi
  done
  if [ "${#edge[@]}" -ge "1" ]; then
    rand=$[$RANDOM % ${#edge[@]}]
    echo "${edge[$rand]}"
  fi
fi
}
{% endraw %}

function start_ssh_agent() {
# TODO: We need to use this someplace again
# We return true or exit
# set up an ssh-agent if we don't already have one, and kill it after if we created
# it now
[ -z $SSH_AUTH_SOCK ] && eval `ssh-agent -s` && AUTODEFLECT_AGENT="$SSH_AGENT_PID"
local counter
while ! ssh-add -ls 2>&1 | grep `ssh-keygen -lf {{ autobrains_config.deploy_key_path }} 2>&1 | awk '{print $2}'` >> config/logs/current.log ; do
  if [ -n "$SMART" ]; then
    echo -e "\nwith --smart ssh-agent and ssh-add must already have edge key loaded. Can not continue.\n"
    exit
  else
    ssh-add {{ autobrains_config.deploy_key_path }}
    let counter=counter+1
    if [ $counter -gt 4 ]; then
      echo "Error loading key. Can not continue"
      exit
    fi
  fi
done
return $(true)
}

function run_deploy() {
for DNET in $DNETS; do
  if [ -n "${REMAP_TOUCHED[$DNET]}" ]; then
    echo "Full deploy needed. Running \"deploy\" for \"$DNET\""
    if [ -n "$DEBUG" ]; then
      {{autobrains_config.deflect_dir}}/scripts/fastdeploy -H $DNET
    else
      {{autobrains_config.deflect_dir}}/scripts/fastdeploy -H $DNET 2>&1 >> config/logs/current.log
    fi
    DEPLOYED[$DNET]=0
  else
    if [ -n "$NEWCLIENTS_YML" ] && [ -z "${SKIPPED_INSTALL[$DNET]}" ]; then
      echo "Full deploy not needed. Running \"conftouch\" for \"$DNET\""
      if [ -n "$DEBUG" ]; then
        {{autobrains_config.deflect_dir}}/scripts/fastdeploy -H $DNET -t
      else
        {{autobrains_config.deflect_dir}}/scripts/fastdeploy -H $DNET -t 2>&1 >> config/logs/current.log
      fi
    else
      echo "Do not need a deploy on \"$DNET\""
    fi
    DEPLOYED[$DNET]=0
  fi
done
}

function mark_all_skipped() {
local d
for d in $DNETS; do
 SKIPPED_INSTALL[$d]=0
done
}

function finalize_deploy_status() {
local d
local nomark
for d in $DNETS; do
  [ -n "${SKIPPED_INSTALL[$DNET]}" ] || [ -z "${DEPLOYED[$DNET]}" ] && nomark=0
done

# This should protect us from marking deployed timestamp if we skipped and ran again
if [ -n "$NEWCLIENTS_YML" ] && [ -z "$nomark" ]; then
  cat clients.yml > clients.yml-revisions/clients.yml-last_used
fi

# If we did not set 'nomark' then update the timestamp file with EPOCH
[ -z "$nomark" ] && echo "$EDATE" > config/rundata/$COMPLETED_TIME_FILE

}

function letsencrypt_update() {
  if [ -z "$OVERRIDECHECKED" ]; then
    check_override
  fi

  rm -rf {{letsencrypt_output}}

  if [ -n "$DEBUG" ]; then
    ansible-playbook site.yml -l letsencrypt
    local exitcode=$?
    if [ $exitcode -ne 0 ]; then
      echo "Something went wrong. Can not continue."
      exit
    fi
  else
    ansible-playbook site.yml -l letsencrypt >> config/logs/current.log &
    spin $!
  fi
}

function sync_dashboard_tls() {
  if [ -n "$DEBUG" ]; then
    ansible-playbook site.yml -l dashboard --tags='tls_bundles'
    local exitcode=$?
    if [ $exitcode -ne 0 ]; then
      echo "Something went wrong. Can not continue."
      exit
    fi
  else
    ansible-playbook site.yml -l dashboard --tags='tls_bundles' >> config/logs/current.log &
    spin $!
  fi
}

#########
### MAIN

# Get us in the right directory
echo "$(date -d @$EDATE)"
if [ "$(pwd)" != "{{playbook_dir}}" ]; then
  echo "Changing to {{playbook_dir}}"
  cd {{playbook_dir}} 2> /dev/null
  RT=$?
  if [ $RT -eq 1 ]; then
    echo "ERROR: Could not change to directory {{playbook_dir}}. Exiting"
    exit
  fi
fi

# initialize a new current.log
cat /dev/null > config/logs/current.log

TSHA1HASH="$(git hash-object roles/autobrains_update/templates/autobrains_update.sh.j2)"
LSHA1HASH="$(grep "^# Version hash:" autobrains_update.sh | cut -d' ' -f5)"

if [ "$TSHA1HASH" != "$LSHA1HASH" ]; then

	# Note: Hash is only updated on a git pull/checkout.
	# only applies to commited files.
	# example:
	#  rm roles/autobrains_update/templates/autobrains_update.sh.j2
	#  git checkout -- roles/autobrains_update/templates/autobrains_update.sh.j2
	# This updates Version hash: 

	echo -e "\n[WARNING]: autobrains_update.sh is out-of-date or not"
	echo "from a git pull/checkout. Update with"
	echo -e "$0 -i --force\n"
fi

# Trap ctrl-c or exit so we unlock and clean up
trap ctrl_c INT
trap finish EXIT

while test $# -gt 0; do
case "$1" in
  -h|--help)
  autobrains_help
  STOP=0
  shift
  ;;
  --all)
  MOST=0
  THEREST=0
  shift
  ;;
  -c|--noclient)
  NOCLIENT=0
  shift
  ;;
  --most)
  MOST=0
  shift
  ;;
  -d|--debug)
  DEBUG=0
  shift
  ;;
  -y|--yes)
  YES=0
  shift
  ;;
  -n|--no)
  NO=0
  shift
  ;;
  -m|--maint)
  MAINT=0
  shift
  ;;
  -s|--nospin)
  NOSPIN=0
  shift
  ;;
  -b|--bypass)
  MAINT_BYPASS=0
  shift
  ;;
  -i|--init)
  INITAU=0
  shift
  ;;
  --smart)
  SMART=0
  MOST=0
  YES=0
  NOSPIN=0
  shift
  ;;
  --force)
  FORCE=0
  shift
  ;;
  --auto)
  UNAME=auto
  shift
  ;;
  *)
  # unknown option
  echo "Unknown option $1"
  STOP=0
  shift
  ;;
esac
done

# Create a lock file that also contains content for notify email when exiting
lock

if [ -n "$NO" ] && ( [ -n "$YES" ] || [ -n "$SMART" ] ); then
  [ -n "$SMART" ] && echo "-y|--yes implied with option --smart"
  echo "Illegal option -y|--yes and -n|--no"
  STOP=0
fi

# Make maint lock check before we do any real work
maint_lock

# If STOP is defined, we will exit.
if [ -n "$STOP" ] || [ -n "$INITAU" ]; then
  if [ -n "$INITAU" ] && [ -z "$FORCE" ]; then
    echo "Option -i|--init must be used with --force"
  elif [ -n "$INITAU" ] && [ -n "$FORCE" ]; then
    initau
  fi 
  exit
fi

if [ -n "$YES" ] || [ -n "$SMART" ] && [ -z "$FORCE" ]; then
  [ -n "$SMART" ] && echo "-y|--yes implied with option --smart"
  echo -e "Option -y|--yes must be used with caution.\nInclude --force option if you are sure"
  exit
fi

if [ -n "$MOST" ]; then
  export SKIP_UPDATE=0
else
  yorn "Run config rebuild options" "export SKIP_UPDATE=0"
  [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && mark_all_skipped 
fi

# Prevent error if never ran and timestamp does not exist
# Thu Jan  1 00:00:00 UTC 1970
[ ! -f "config/rundata/$AW_LASTRUN_FILE" ] && echo "0" > config/rundata/$AW_LASTRUN_FILE
[ ! -f "config/rundata/$COMPLETED_TIME_FILE" ] && echo "0" > config/rundata/$COMPLETED_TIME_FILE

if [ -n "$SKIP_UPDATE" ]; then
  if [ -z "$NOCLIENT" ]; then
    if [ -n "$MOST" ]; then
      fetch_clients_yml
    else
      yorn "Download latest dashboard config" "fetch_clients_yml"
    fi
  fi

  if [ -n "$MOST" ]; then
    letsencrypt_update
    sync_dashboard_tls
    controller_update
  else
    yorn "Update (letsencrypt)" "letsencrypt_update"
    [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && mark_all_skipped
    yorn "Update (sync_dashboard_tls)" "sync_dashboard_tls"
    [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && mark_all_skipped
    yorn "Update (controller) config" "controller_update"
    [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && mark_all_skipped 
  fi
fi

if [ -n "$MOST" ]; then
  all_diff
else
  yorn "Check config changes (controller)" "all_diff"
  [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && mark_all_skipped 
fi

for DNET in $DNETS; do
  if [ -n "${REMAP_TOUCHED[$DNET]}" ]; then
    dot_generated
  fi
done

# Only show if ATS change installed or clients.yml was updated
if [ -n "$CHANGED" ] || [ -n "$NEWCLIENTS_YML" ]; then
  yorn "Deploy to network" "run_deploy"
  [ "$yn" = 'n' ] || [ "$yn" = 'N' ] && mark_all_skipped
else
  # We should only be here if no changes or no new clients.yml 
  yn='n' 
fi

if [ "$yn" = 'n'  ] || [ "$yn" = 'N' ]; then
  if [ -z "$SMART" ]; then
    echo "Below are the best guessed details that"
    echo -e "still needs to happen to complete.\n"
  fi
for DNET in $DNETS; do
  if [ -n "${REMAP_TOUCHED[$DNET]}" ]; then
    echo "proxy config changes for \"$DNET\" detected"
    nonlive=$(get_nonlive_edge)
    if [ $nonlive ]; then
      echo "deploy.sh -A $DNET -p ats -l -H $nonlive"
    else
      echo "ERROR: deploy.sh -A $DNET -p ats -H **missing**"
    fi
    echo -e "deploy.sh -A $DNET -p ats -l -H ALL\n"
  else
    echo "No proxy config changes for \"$DNET\" detected"
    if [ -n "$NEWCLIENTS_YML" ] && [ -z "${SKIPPED_INSTALL[$DNET]}" ]; then 
      echo -e "deploy.sh -A $DNET -p conftouch -H ALL\n"
    else
      if [ -n "${SKIPPED_INSTALL[$DNET]}" ]; then
        echo -e "and conftouch not recommended when skipping any steps.\n"
      else
        [ -n "$SMART" ] || echo -e "and conftouch not needed.\n"
        # We are here because we do not need any deploy ran for this DNET and we did not skip.
        # Marking as deployed.
        DEPLOYED[$DNET]=0
      fi
    fi
  fi
done
[ -n "$SMART" ] || echo "\"edge_manage\" will pick up zone changes automatically."
fi

[ -n "$SMART" ] || echo "Update dashadmin and redmine if needed."
[ -n "$SMART" ] || echo

# move lastest clients.yml to clients.yml-last_used
# and set a timestamp if everything deployed or deploy not needed, as long as we did not skip anything.
finalize_deploy_status

# This should also run the finish function since we have a trap on EXIT above.
exit
